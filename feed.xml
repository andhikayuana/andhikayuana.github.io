<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>yuana.id</title>
    <link href="https://yuana.id/feed.xml" rel="self" />
    <link href="https://yuana.id" />
    <updated>2019-09-21T08:54:41+07:00</updated>
    <author>
        <name>andhikayuana</name>
    </author>
    <id>https://yuana.id</id>

    <entry>
        <title>Kotlin Everywhere : Android Fundamentals</title>
        <author>
            <name>andhikayuana</name>
        </author>
        <link href="https://yuana.id/kotlin-everywhere-android-fundamentals/"/>
        <id>https://yuana.id/kotlin-everywhere-android-fundamentals/</id>
            <category term="Tech"/>
            <category term="General"/>

        <updated>2019-09-21T08:54:35+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://yuana.id/media/posts/4/Screen-Shot-2019-09-21-at-00.30.47.png" alt="" />
                     Dari tutorial sebelumnya yang berada di Lanjut kita akan melakukan implementasi konsumsi API dari suatu Backend. tak perlu berlama - lama, langsung aja yak step selanjutnya kita tambahkan dependensi yang dibutuhkan untuk konsum suatu API pada file build.gradle pada level app, kali ini kita gunakan Retrofit. implementation 'com.squareup.retrofit2.retrofit:2.6.1' implementation&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://yuana.id/media/posts/4/Screen-Shot-2019-09-21-at-00.30.47.png" alt="" />
                <p><img class="post__image" src="https://yuana.id/media/posts/4/Screen-Shot-2019-09-21-at-00.30.47.png" alt="Kotlin Everywhere - Build Simple CRUD Android App with Kotlin" width="1413" height="792"></p>
<h2 id="mcetoc_1dl7sl1i20">Lanjutan </h2>
<p>Dari tutorial sebelumnya yang berada di </p>
<ul>
<li style="font-weight: 300;"><a href="https://bit.ly/KotlinBasic1"><span style="font-weight: 300;">https://bit.ly/KotlinBasic1</span></a><span style="font-weight: 300;"> </span></li>
<li style="font-weight: 300;"><a href="https://bit.ly/KotlinBasic2"><span style="font-weight: 300;">https://bit.ly/KotlinBasic2</span></a><span style="font-weight: 300;"> </span></li>
<li style="font-weight: 300;"><a href="https://bit.ly/KotlinBasic3"><span style="font-weight: 300;">https://bit.ly/KotlinBasic3</span></a><span style="font-weight: 300;"> </span></li>
</ul>
<p>Lanjut kita akan melakukan implementasi konsumsi <em>API</em> dari suatu <em>Backend. </em>tak perlu berlama - lama, langsung aja yak step selanjutnya </p>
<p>kita tambahkan dependensi yang dibutuhkan untuk konsum suatu <em>API </em>pada file <strong>build.gradle</strong> pada level <strong>app</strong>, kali ini kita gunakan <em>Retrofit</em>.</p>
<pre>implementation 'com.squareup.retrofit2.retrofit:2.6.1'<br>implementation 'com.squareup.retrofit2.converter-gson:2.6.1'</pre>
<p>kemudian klik <em>sync project with gradle files </em></p>
<p><img class="post__image" src="https://yuana.id/media/posts/4/Screen-Shot-2019-09-21-at-00.46.27.png" alt="" width="836" height="29"> </p>
<p>setelah proses sinkronisasi selesai, kita akan membuat struktur seperti di bawah ini</p>
<pre>.<br>├── App.kt<br>├── DetailProductActivity.kt<br>├── MainActivity.kt<br>├── adapter<br>│   └── ListProductAdapter.kt<br>├── data<br>│   ├── model<br>│   │   └── Product.kt<br>│   ├── remote<br>│   │   ├── BelanjaApi.kt<br>│   │   └── response<br>│   │       ├── ProductResponse.kt<br>│   │       └── ProductsResponse.kt<br>│   └── repository<br>│       └── ProductRepository.kt<br>└── ext<br>    └── Toaster.kt<br><br>7 directories, 10 files</pre>
<p id="mcetoc_1dl8gf5k40">dengan memindahkan berkas sebelumnya ke <em>package</em> yang dikehendaki seperti di atas dan membuat berkas baru (masih kosongan)</p>
<h3 id="mcetoc_1dl7sp9ro0">Instalasi Plugin</h3>
<p id="mcetoc_1dl7svb7c2">Untuk mempermudah proses <em>parsing </em>response dari suatu <em>API</em>, kita bisa menggunakan suatu generator yang beranama <em>JsonToKotlinClass</em> yang ada di <em>marketplace plugin </em>pada <strong><em>Android Studio -&gt;</em></strong> <strong><em>Preferences -&gt; Plugins -&gt; JsonToKotlinClass</em></strong>, pasang</p>
<p><img class="post__image" src="https://yuana.id/media/posts/4/Screen-Shot-2019-09-21-at-00.54.14.png" alt="JsonToKotlinClass" width="769" height="89"></p>
<h3 id="mcetoc_1dl8kb8op0">Dokumentasi API</h3>
<p id="mcetoc_1dl8kbdjs1">Kali ini kita akan menggunakan <em>Rest API </em>dari proyek ini <a href="https://github.com/andhikayuana/belanja-api" title="belanja-api">https://github.com/andhikayuana/belanja-api</a>, di sana juga sudah ada dokumentasinya dan bisa dicoba secara online dengan mengakses <em>BASE_URL </em><a href="https://belanja-api.herokuapp.com/">https://belanja-api.herokuapp.com/</a>. Berikut merupakan response jika anda mengakses <em>link</em> tersebut </p>
<pre>{
    <span class="pl-s"><span class="pl-pds">"</span>code<span class="pl-pds">"</span></span>: <span class="pl-c1">200</span>,
    <span class="pl-s"><span class="pl-pds">"</span>msg<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Success<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Belanja API Demo<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>version<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>1.0.0<span class="pl-pds">"</span></span>
    }
}</pre>
<p>Untuk <em>endpoint</em> yang kita gunakan yaitu</p>
<pre>#<code>GET</code> <code>/products</code> <em>get all products</em></pre>
<pre>#response<br>{
    <span class="pl-s"><span class="pl-pds">"</span>code<span class="pl-pds">"</span></span>: <span class="pl-c1">200</span>,
    <span class="pl-s"><span class="pl-pds">"</span>msg<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Success<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>: [
        {
            <span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>: <span class="pl-c1">1</span>,
            <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Sandal Mahal<span class="pl-pds">"</span></span>,
            <span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span>: <span class="pl-c1">5000000</span>,
            <span class="pl-s"><span class="pl-pds">"</span>image<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>https://anu.com/images/sandal-mahal.jpg<span class="pl-pds">"</span></span>
        },
        {
            <span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>: <span class="pl-c1">2</span>,
            <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Baju Mahal<span class="pl-pds">"</span></span>,
            <span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span>: <span class="pl-c1">8000000</span>,
            <span class="pl-s"><span class="pl-pds">"</span>image<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>https://anu.com/images/baju-mahal.jpg<span class="pl-pds">"</span></span>
        }
    ]
}</pre>
<pre> #<code>POST</code> <code>/products</code></pre>
<pre>#request<br>{
	<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Sepatu Mahal Banget<span class="pl-pds">"</span></span>,
	<span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span>: <span class="pl-c1">6000000</span>,
	<span class="pl-s"><span class="pl-pds">"</span>image<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>http://anu.com/images/weird-shoes-3-1.jpg<span class="pl-pds">"</span></span>
}</pre>
<pre>#response<br>{
    <span class="pl-s"><span class="pl-pds">"</span>code<span class="pl-pds">"</span></span>: <span class="pl-c1">200</span>,
    <span class="pl-s"><span class="pl-pds">"</span>msg<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Success<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Sepatu Mahal Banget<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span>: <span class="pl-c1">6000000</span>,
        <span class="pl-s"><span class="pl-pds">"</span>image<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>http://anu.com/images/weird-shoes-3-1.jpg<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>: <span class="pl-c1">4</span>
    }
}</pre>
<pre> #<code>PUT</code> <code>/products/{id}</code> </pre>
<pre>#request<br>{
	<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Sepatu Mahal wkwk<span class="pl-pds">"</span></span>,
	<span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span>: <span class="pl-c1">2500000</span>,
	<span class="pl-s"><span class="pl-pds">"</span>image<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>https://anu.com/weird-and-funny-shoes02.jpg<span class="pl-pds">"</span></span>
}</pre>
<pre>#response<br>{
    <span class="pl-s"><span class="pl-pds">"</span>code<span class="pl-pds">"</span></span>: <span class="pl-c1">200</span>,
    <span class="pl-s"><span class="pl-pds">"</span>msg<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Success<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span>: <span class="pl-c1">4</span>,
        <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Sepatu Mahal wkwk<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span>: <span class="pl-c1">2500000</span>,
        <span class="pl-s"><span class="pl-pds">"</span>image<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>https://anu.com/weird-and-funny-shoes02.jpg<span class="pl-pds">"</span></span>
    }
}</pre>
<pre> #<code>DELETE</code> <code>/products/{id}</code></pre>
<pre>#response<br>{
    <span class="pl-s"><span class="pl-pds">"</span>code<span class="pl-pds">"</span></span>: <span class="pl-c1">200</span>,
    <span class="pl-s"><span class="pl-pds">"</span>msg<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>Success<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>: []
}</pre>
<p id="mcetoc_1dl8o96g03">Buatlah <em>Singleton class </em>seperti berikut </p>
<pre>//id.belanja.app.data.remote</pre>
<pre><br><br>object BelanjaApi {<br><br> fun create(): Api {<br> val retrofit = Retrofit.Builder()<br> .addConverterFactory(GsonConverterFactory.create())<br> .baseUrl(BuildConfig.BASE_URL)<br> .build()<br> return retrofit.create(Api::class.java)<br> }<br><br> interface Api {<br> @GET("/products")<br> fun getProducts(): Call&lt;ProductsResponse&gt;<br><br> @POST("/products")<br> fun saveProduct(@Body product: Product): Call&lt;ProductResponse&gt;<br><br> @DELETE("/products/{id}")<br> fun deleteProduct(@Path("id") id: Int): Call&lt;JsonObject&gt;</pre>
<pre><br><code>        @PUT("/products/{id}")</code><br><code>        fun updateProuct(@Path("id") id: Int, @Body product: Product): Call&lt;ProductResponse&gt;</code><br><code>    }</code><br><code>}</code></pre>
<h3 id="mcetoc_1dl8naluh0"> </h3>
<h3 id="mcetoc_1dl8obans5">Kotlin Extension</h3>
<p>Kotlin memiliki kemampuan untuk melakukan <em>extends</em> suatu <em>class</em> dengan <em>function</em> baru tanpa harus mewarisi dari <em>class. </em>gimana ? pusing :D</p>
<p>seperti ini kalo di tulis di dalam kode</p>
<pre><span class="hljs-function"><span class="hljs-keyword">//extensions<br>fun</span> <span class="hljs-built_in">Int</span>.<span class="hljs-title">triple</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> { <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span> * <span class="hljs-number">3</span> } <br><br>//implementation<br><span class="hljs-keyword">var</span> result = <span class="hljs-number">3.</span>triple()</pre>
<p> Seolah kita langsung memiliki fungsi <strong>triple() </strong>pada tipe data <strong>Int</strong>. Langsung saja, kita akan membuat ekstensi untuk melakukan <em>Toast </em>pada komponen android.</p>
<pre>//id.belanja.app.ext<br>fun Any.toast(context: Context, duration: Int = Toast.LENGTH_SHORT): Toast {<br>return Toast.makeText(context, this.toString(), duration).apply { show() }<br>} </pre>
<p>nantinya kita bisa gunakan ekstensi tersebut pada suatu <em>Activity</em> misalnya, seperti</p>
<pre>"Hello World!".toast(this@MainActivity)</pre>
<h3 id="mcetoc_1dl8o8du42">Implementation with Refactoring </h3>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Tutorial - Membuat PHP Package sendiri [bagian 1]</title>
        <author>
            <name>andhikayuana</name>
        </author>
        <link href="https://yuana.id/tutorial-membuat-php-package-sendiri-bagian-1/"/>
        <id>https://yuana.id/tutorial-membuat-php-package-sendiri-bagian-1/</id>
            <category term="Tech"/>
            <category term="General"/>

        <updated>2019-06-11T16:33:54+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://yuana.id/media/posts/3/logo-composer-transparent2.png" alt="" />
                    Tutorial - Membuat PHP Package sendiriApa itu PHP Package ?Anda pernah menggunakan PHP framework ? misalnya menggunakan Laravel atau Yii, pasti Anda pernah menjalankan perintah seperti berikut, misal untuk menambahkan suatu pustaka dari Facebook SDK : composer require facebook/graph-sdkatau menambahkan menambahkan pustaka untuk pengolahan waktu&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://yuana.id/media/posts/3/logo-composer-transparent2.png" alt="" />
                <h1 id="mcetoc_1dd2ssgr40"><img class="post__image--center" src="https://yuana.id/media/posts/3/logo-composer-transparent2.png" alt="composer" width="290" height="356"></h1>
<h1 id="mcetoc_1dd2rt2d20">Tutorial - Membuat PHP Package sendiri</h1>
<h2 id="mcetoc_1dd2rt2d31">Apa itu PHP Package ?</h2>
Anda pernah menggunakan PHP <i>framework</i> ? misalnya menggunakan <a href="https://laravel.com/">Laravel</a> atau <a href="https://www.yiiframework.com/">Yii</a>, pasti Anda pernah menjalankan perintah seperti berikut, misal untuk menambahkan suatu pustaka dari Facebook SDK :<br>
<pre><code>composer require facebook/graph-sdk</code></pre>
atau menambahkan menambahkan pustaka untuk pengolahan waktu dari <a href="https://packagist.org/packages/nesbot/carbon"><i><strong>nesbot/carbon</strong></i></a><br>
<pre><code>composer </code><code>require</code><code> nesbot/carbon</code></pre>
Secara sederhana perintah di atas bisa diartikan untuk mengunduh PHP<i> Package</i> ke dalam direktori dan dapat digunakan di lingkungan proyek kita bekerja. <br> <br>
<blockquote><i>Jadi, PHP Package merupakan suatu pustaka yang mempermudah pekerjaan pengembang perangkat lunak berbasis PHP, sehingga para pengembang ini dapat fokus mengerjakan proses bisnis yang memerlukan upaya lebih.</i></blockquote>
<br> Misal Anda males repot untuk melakukan pengolahan waktu pada PHP <i>Native</i>, Anda dapat menggunakan paket pustaka dari <a href="https://packagist.org/packages/nesbot/carbon"><i><strong>nesbot/carbon</strong></i></a>, tinggal pasang dan gunakan. <br> <br>
<pre>&lt;?php<br><br>// contoh<br><br><code>require</code><code> </code><code>'vendor/autoload.php'</code><code>;<br></code><code><br>use</code><code> </code><code>Carbon</code><code>\</code><code>Carbon</code><code>; </code><br><br><code>$howOldAmI</code><code> = Carbon::createFromDate(1994</code><code>, 1</code><code>, 1</code><code>)-&gt;age;<br><br>echo $howOldAmI;<br> </code></pre>
Jangan lupa baca dokumentasinya juga! 😄 karena pengembang yang baik selalu membaca dokumentasi.<br> <br> Nah, pada artikel ini nanti akan dijelaskan bagaimana caranya membuat PHP Package sendiri dan mempublikasikannya juga, agar nantinya bisa digunakan oleh orang lain yang membutuhkan.<br> <br> Ada kata-kata bijaknya juga 😄<br> <br>
<blockquote><i>Sharing is Caring</i></blockquote>
<h2 id="mcetoc_1dd2rt2d32">Sekilas tentang Composer</h2>
<h3 id="mcetoc_1dd2rt2d33">Intro</h3>
Menurut situs resmi dari <a href="https://getcomposer.org/doc/00-intro.md">Composer</a> :<br> <br>
<blockquote><i>Composer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</i></blockquote>
<h3 id="mcetoc_1dd2rt2d34">Dependency Management</h3>
<blockquote><i>Composer <strong>bukan</strong> paket manajer yang mana sama seperti <strong>Yum </strong>atau <strong>Apt</strong>. Ini berkaitan dengan paket atau pustaka, tetapi mengelolanya berdasarkan suatu proyek dan biasanya terpasang pada direktori (misal <strong>vendor</strong>) di dalam direktori proyek Anda.</i></blockquote>
<h3 id="mcetoc_1dd2rt2d35">Installation</h3>
<pre>php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"<br>php -r "if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"<br>php composer-setup.php<br>php -r "unlink('composer-setup.php');"</pre>
Jika sudah sukses Anda harusnya bisa melihat seperti ini di Terminal<br>
<pre>andhikayuana@yuana-machine:~|⇒  composer --version<br>Composer version 1.6.5 2018-05-04 11:44:59<br>andhikayuana@yuana-machine:~|⇒  </pre>
<h2 id="mcetoc_1dd2rt2d36">Let's Create</h2>
<blockquote><i>Tibalah saat dimana kita akan mengetik kode-kode yang harapannya bisa menjadi manfaat bagi banyak orang </i>😄<i> Kita akan membuat pustaka secara sederhana untuk menghitung luas dan keliling bangun datar.</i></blockquote>
<h3 id="mcetoc_1dd2rt2d37">Membuat Kerangka Proyek</h3>
Pastikan Git, PHP, Composer sudah terpasang dan berjalan dengan baik. Mulailah dengan membuat direktori proyek Anda dan membuat beberapa berkas yang bisa membantu orang lain ketika memakai pustaka yang kita buat.<br>
<pre>mkdir bangun-datar<br>cd bangun-datar<br>touch README.md LICENSE phpunit.xml .gitignore<br>mkdir src tests</pre>
Kemudian kita melakukan inisiasi composer di dalam proyek kita dengan menjalankan perintah<br>
<pre>composer init</pre>
Dan kemudian ikuti petunjuk yang tertera di Terminal, contoh<br>
<pre>andhikayuana@yuana-machine:~/Code/playground/bangun-datar|<br>⇒  composer init<br><br>                                            <br>  Welcome to the Composer config generator  <br>                                            <br><br><br>This command will guide you through creating your composer.json config.<br><br>Package name (&lt;vendor&gt;/&lt;name&gt;) [andhikayuana/bangun-datar]: <br>Description []: menghitung luas dan keliling bangun datar<br>Author [andhikayuana &lt;andhikayuana@gmail.com&gt;, n to skip]: <br>Minimum Stability []: <br>Package Type (e.g. library, project, metapackage, composer-plugin) []: library<br>License []: MIT<br><br>Define your dependencies.<br><br>Would you like to define your dependencies (require) interactively [yes]? no<br>Would you like to define your dev dependencies (require-dev) interactively [yes]? yes<br>Search for a package: phpunit<br><br>Found 15 packages matching phpunit<br><br>   [0] phpunit/phpunit <br>   [1] phpunit/phpunit-mock-objects Abandoned. Use  instead.<br>   [2] phpunit/php-token-stream <br>   [3] phpunit/php-timer <br>   [4] phpunit/php-text-template <br>   [5] phpunit/php-file-iterator <br>   [6] phpunit/php-code-coverage <br>   [7] symfony/phpunit-bridge <br>   [8] phpunit/phpunit-selenium <br>   [9] johnkary/phpunit-speedtrap <br>  [10] codedungeon/phpunit-result-printer <br>  [11] codeception/phpunit-wrapper <br>  [12] jean85/pretty-package-versions <br>  [13] brianium/paratest <br>  [14] codeception/stub <br><br>Enter package # to add, or the complete package name if it is not listed: 0<br>Enter the version constraint to require (or leave blank to use the latest version):  <br>Using version ^7.5 for phpunit/phpunit<br>Search for a package: <br><br>{<br>    "name": "andhikayuana/bangun-datar",<br>    "description": "menghitung luas dan keliling bangun datar",<br>    "type": "library",<br>    "require-dev": {<br>        "phpunit/phpunit": "^7.5"<br>    },<br>    "license": "MIT",<br>    "authors": [<br>        {<br>            "name": "andhikayuana",<br>            "email": "andhikayuana@gmail.com"<br>        }<br>    ],<br>    "require": {}<br>}<br><br>Do you confirm generation [yes]?</pre>
Sekarang untuk melakukan pemasangan dependensi yang didefinisikan tadi bisa menggunakan perintah<br>
<pre>composer install</pre>
Jika sukses, direktori proyek Anda akan seperti berikut<br>
<pre>.<br>├── LICENSE<br>├── README.md<br>├── composer.json<br>├── composer.lock<br>├── phpunit.xml<br>├── src<br>├── tests<br>└── vendor<br><br>3 directories, 5 files</pre>
Lengkapi isi <strong>LICENSE</strong> dengan memilih lisensi yang cocok bagi pustaka yang Anda buat, dalam contoh ini menggunakan lisensi MIT. Anda bisa memilih lisensi dari situs <a href="https://choosealicense.com/">https://choosealicense.com</a><br> <br> Lengkapi konfigurasi pada berkas <strong>phpunit.xml</strong> untuk keperluan penulisan Unit Test dengan <a href="https://phpunit.de/">PHPUnit</a> seperti berikut, atau ingin melakukan konfigurasi sendiri bisa baca dokumentasinya 😄<br>
<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br>&lt;phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br>         xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/7.5/phpunit.xsd"<br>         bootstrap="vendor/autoload.php"<br>         forceCoversAnnotation="true"<br>         beStrictAboutCoversAnnotation="true"<br>         beStrictAboutOutputDuringTests="true"<br>         beStrictAboutTodoAnnotatedTests="true"<br>         colors="true"<br>         verbose="true"&gt;<br>    &lt;testsuites&gt;<br>        &lt;testsuite name="default"&gt;<br>            &lt;directory suffix="Test.php"&gt;tests&lt;/directory&gt;<br>        &lt;/testsuite&gt;<br>    &lt;/testsuites&gt;<br><br>    &lt;filter&gt;<br>        &lt;whitelist processUncoveredFilesFromWhitelist="true"&gt;<br>            &lt;directory suffix=".php"&gt;src&lt;/directory&gt;<br>        &lt;/whitelist&gt;<br>    &lt;/filter&gt;<br>&lt;/phpunit&gt;</pre>
Lengkapi README.md, diusahakan jelas dan mudah dimengerti<br> <br> Inisiasi git dan jangan masukkan direktori <strong>vendor </strong>dalam git dengan perintah<br>
<pre>git init<br>echo vendor &gt;&gt; .gitignore</pre>
Tambahkan perintah untuk ekseskusi tesnya pada berkas composer.json<br>
<pre>{<br>   ...<br>    "scripts": {<br>       "test": [<br>           "phpunit --testdox"<br>       ]<br>    }<br>}</pre>
Anda bisa mencobanya dan bisa melihat hasilnya<br>
<pre>composer test<br>&gt; phpunit --testdox<br>PHPUnit 7.5.12 by Sebastian Bergmann and contributors.<br><br>Runtime:       PHP 7.1.23<br>Configuration: /Users/andhikayuana/Code/playground/bangun-datar/phpunit.xml<br><br><br>Time: 123 ms, Memory: 2.00 MB<br><br>No tests executed!</pre>
Sampai di sini kita sudah selesai membuat kerangka proyek pustaka bangun-datar<br>
<h3 id="mcetoc_1dd2rt2d38">Membuat Tes Unit</h3>
Mencoba membuat tes unit dengan PHPUnit, caranya kita buat berkas dengan akhiran nama berkas tersebut dengan Test.php pada direktori tests, contoh <i>RectangleTest.php</i><br>
<pre>touch test/BasicTest.php</pre>
<pre>// test/BasicTest.php<br>&lt;?php<br><br>use PHPUnit\Framework\TestCase;<br><br>class BasicTest extends TestCase<br>{<br>    public function testShouldSuccessWhenAssertTrue(): void<br>    {<br>        $this-&gt;assertEquals(5, 5);<br>    }<br>}</pre>
Anda bisa menjalankan tesnya seperti pada perintah di sebelumnya<br>
<pre>composer test<br>&gt; phpunit --testdox<br>PHPUnit 7.5.12 by Sebastian Bergmann and contributors.<br><br>Runtime:       PHP 7.1.23<br>Configuration: /Users/andhikayuana/Code/playground/bangun-datar/phpunit.xml<br><br>Basic<br> ✔ Should success when assert true [2.49 ms]<br><br>Time: 34 ms, Memory: 4.00 MB<br><br>OK (1 test, 1 assertion)</pre>
<h3 id="mcetoc_1dd2rtmppb"><!-- wp:paragraph --></h3>
<p>Tutorial kali ini sampai sini dulu, Tunggu bagian 2 dan jangan lupa untuk melakukan commit kode yang Anda buat 😄</p>
<p>Anda juga bisa membacanya di sini <a href="https://ajaro.id/blog/2019/06/11/tutorial-membuat-php-package-sendiri-bagian-1/">https://ajaro.id/blog/2019/06/11/tutorial-membuat-php-package-sendiri-bagian-1/</a></p>
<h3 id="mcetoc_1dd2rtmppc"><!-- /wp:paragraph --> <!-- wp:paragraph --></h3>
<p>Terimakasih, semoga bermanfaat</p>
<h3 id="mcetoc_1dd2rt2d39"><!-- /wp:paragraph --></h3>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hello World!</title>
        <author>
            <name>andhikayuana</name>
        </author>
        <link href="https://yuana.id/hello-world/"/>
        <id>https://yuana.id/hello-world/</id>
            <category term="Tech"/>
            <category term="Music"/>
            <category term="General"/>

        <updated>2019-03-14T10:39:58+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://yuana.id/media/posts/1/" alt="" />
                    Lorem ipsum dolor sit amet
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://yuana.id/media/posts/1/" alt="" />
                Lorem ipsum dolor sit amet
            ]]>
        </content>
    </entry>
</feed>
